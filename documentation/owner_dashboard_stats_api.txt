### File: `src/app/api/owner/dashboard/stats/route.ts`

#### **1. File Overview**

This file defines the API endpoint that provides all the necessary statistics for the Facility Owner Dashboard. Its primary role is to fetch and calculate various metrics related to an owner's venues, bookings, and earnings from the database.

---

#### **2. Libraries & Hooks Used**

*   **`next/server` (`NextResponse`)**: The standard Next.js object used to create API responses, including setting status codes and JSON bodies.
*   **`next-auth` (`getServerSession`)**: A server-side function to get the user's session data. This is crucial for security, as it identifies who is making the request.
*   **`@/lib/prisma` (`prisma`)**: The Prisma Client instance, used to interact with the database.
*   **`@/lib/auth` (`authOptions`)**: The NextAuth.js configuration object, required by `getServerSession`.
*   **`@/generated/prisma` (`BookingStatus`)**: An enum generated by Prisma from the database schema, used to filter bookings by their status.

---

#### **3. Workflow & Logic**

This is a `GET` handler, meaning it responds to `GET` requests at this URL.

1.  **Authentication & Authorization**: The first step is to get the user's session using `getServerSession`. It then immediately checks if a session exists and if the user's role is `"OWNER"`. If not, it returns a `401 Unauthorized` error, effectively protecting the endpoint.
2.  **Find Owner Profile**: It uses the `userId` from the session to find the corresponding `FacilityOwner` profile in the database. This is the key to fetching data only for the logged-in owner.
3.  **Handle New Owners**: It includes a clever check: if a user has the `OWNER` role but doesn't have a `FacilityOwner` profile record yet, it creates one for them automatically. This prevents errors for newly registered owners.
4.  **Parallel Database Queries**: To fetch data efficiently, it uses `Promise.all()` to run multiple database queries at the same time. It fetches:
    *   Venue counts (total and active).
    *   Booking counts (total, this month, last month, today).
    *   Earnings data (total, this month, last month).
    *   A list of the 5 most recent bookings for the "Recent Activity" feed.
5.  **Data Calculation**: After fetching the data, it performs calculations:
    *   It calculates the percentage growth for bookings and earnings by comparing this month's data to last month's.
    *   It converts the total earnings from paisa (the integer value stored in the DB) to rupees by dividing by 100.
6.  **Response Formatting**: It assembles all the raw and calculated data into a single `stats` object.
7.  **Return Response**: It sends the `stats` object back to the frontend as a JSON response with a `200 OK` status.

---

#### **4. Key Functions & Properties**

*   **`GET()`**: The main function that handles all incoming `GET` requests to this endpoint.
*   **`prisma.venue.groupBy()`**: Used to efficiently count the number of venues based on their `approved` status.
*   **`prisma.payment.aggregate()`**: Used to calculate the sum (`_sum`) of the `amount` field for all successful payments to get the total earnings.
*   **Date Ranges**: The function creates several `Date` objects to define specific time windows (today, this month, last month) for fetching time-sensitive data like recent bookings and monthly earnings.
